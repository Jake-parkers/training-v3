import com.neo4j.gradle.s3.S3Plugin
import com.neo4j.gradle.s3.S3UploadTask
import com.neo4j.gradle.asciidoctor.AsciidoctorModuleDescriptorPlugin
import com.neo4j.gradle.asciidoctor.AsciidoctorModuleDescriptorGenerateTask
import com.neo4j.gradle.wordpress.WordPressPlugin
import com.neo4j.gradle.wordpress.WordPressUploadTask
import org.asciidoctor.gradle.jvm.AsciidoctorTask
import org.asciidoctor.gradle.jvm.pdf.AsciidoctorPdfTask
import org.asciidoctor.gradle.jvm.slides.AsciidoctorJRevealJSTask
import org.kordamp.gradle.livereload.LiveReloadTask

plugins {
  id 'org.asciidoctor.jvm.gems' version '3.1.0' apply false
  id 'org.asciidoctor.jvm.convert' version '3.1.0' apply false
  id 'org.asciidoctor.jvm.pdf' version '3.1.0' apply false
  id 'org.asciidoctor.jvm.revealjs' version '3.1.0' apply false
  id 'org.kordamp.gradle.livereload' version '0.2.1' apply false
}

subprojects {

  apply plugin: 'org.asciidoctor.jvm.gems'
  apply plugin: 'org.asciidoctor.jvm.revealjs'
  apply plugin: S3Plugin
  apply plugin: WordPressPlugin
  apply plugin: AsciidoctorModuleDescriptorPlugin

  dependencies {
    asciidoctorGems 'rubygems:rouge:3.13.0'
  }

  repositories {
    mavenCentral()
    jcenter()
    ruby {
      gems()
    }
  }

  def stage = project.findProperty('stage')

  s3 {
    profile = project.hasProperty('s3-profile') ? project.property('s3-profile') : 'default'
    region = 'us-east-1'
  }

  wordpress {
    username = project.hasProperty('wordpress-username') ? project.property('wordpress-username') : 'neo'
    password = project.hasProperty('wordpress-password') ? project.property('wordpress-password') : ''
    host = project.hasProperty('wordpress-host') ? project.property('wordpress-host') : 'localhost'
    scheme = 'https'
  }

  asciidoctorj {
    requires "${rootProject.projectDir}/resources/extensions.rb"
    attributes 'allow-uri-read': '',
      'stage': stage != null ? stage : '',
      'source-highlighter': 'rouge',
      'rouge-style': 'neo.forest',
      'presenter': 'Neo Technology',
      'twitter': 'neo4j',
      'email': 'info@neotechnology.com',
      'neo4j-version': '4.0',
      'currentyear': '2020',
      'experimental': '',
      'manual': 'http://neo4j.com/docs/developer-manual/current',
      'manual-cypher': '{manual}/cypher'
  }

  revealjs {
    version = '4.0.1'
    templateGitHub {
      organisation = 'hakimel'
      repository = 'reveal.js'
      tag = '3.9.2'
    }
  }

  revealjsPlugins {
    github 'denehyg', {
      organisation = 'denehyg'
      repository = 'reveal.js-menu'
      branch = 'master'
    }
  }

  task generateModuleDescriptor(type: AsciidoctorModuleDescriptorGenerateTask) {
    source = "${projectDir}/docs"
    outputDir "${projectDir}/build/online"
    moduleName project.name
  }

  // for debugging purpose
  task convertStandaloneHtml(type: AsciidoctorTask) {
    dependsOn asciidoctorGemsPrepare, generateModuleDescriptor

    inputs.dir "${rootProject.projectDir}/resources/templates"

    //noinspection GroovyAccessibility,GroovyAssignabilityCheck
    asciidoctorj {
      options template_dirs: ["${rootProject.projectDir}/resources/templates"]
      attributes 'imagesdir': 'images',
        'sectanchors': ''
    }

    baseDir file("${projectDir}/docs")
    sourceDir file("${projectDir}/docs")
    outputDir file("${projectDir}/build/standalone")

    resources {
      from("${rootProject.projectDir}/resources/images") {
        include '**'
        into 'images'
      }
      from("${projectDir}/images") {
        include '**'
        into 'images'
      }
    }
  }

  task convertOnlineHtml(type: AsciidoctorTask) {
    dependsOn asciidoctorGemsPrepare, generateModuleDescriptor

    inputs.dir "${rootProject.projectDir}/resources/templates/course"

    //noinspection GroovyAccessibility,GroovyAssignabilityCheck
    asciidoctorj {
      def imagesdir = {
        switch (stage) {
          case 'production':
            return "https://s3.amazonaws.com/dev.assets.neo4j.com/course/${project.name}/images/"
          case 'testing':
            return "https://s3.amazonaws.com/dev.assets.neo4j.com/test-course/${project.name}/images/"
          default:
            return './images'
        }
      }
      options template_dirs: ["${rootProject.projectDir}/resources/templates/course"]
      attributes 'imagesdir': imagesdir,
        'sectanchors': '',
        'intercom-app-id': 'dt0ig5ab'
    }

    if (stage != 'production' && stage != 'testing') {
      resources {
        from("${projectDir}/images") {
          include '**'
          into 'images'
        }
      }
    }

    baseDir file("${projectDir}/docs")
    sourceDir file("${projectDir}/docs")
    outputDir file("${projectDir}/build/online")
  }

  task convertSlides(type: AsciidoctorJRevealJSTask) {
    dependsOn asciidoctorGemsPrepare

    revealjsOptions {
      controls = false
      progressBar = true
      pushToHistory = true
      overviewMode = true
      touchMode = true
      theme = 'white'
    }

    //noinspection GroovyAccessibility,GroovyAssignabilityCheck
    asciidoctorj {
      options template_dirs: ["${rootProject.projectDir}/resources/templates/slide"]
      attributes 'revealjs_customtheme': 'themes/reveal.css',
        'imagesdir': 'images',
        'revealjs_center': 'false',
        'revealjs_width': '1280',
        'revealjs_height': '720',
        'revealjs_margin': '0.05',
        'revealjs_fragmentinurl': 'true',
        'revealjs_slidenumber': 'c',
        'revealjs_minscale': '0.2',
        'revealjs_maxscale': '2'
    }

    plugins 'denehyg/menu.js'
    pluginConfigurationFile "${rootProject.projectDir}/resources/extensions/revealjs-extension-config.js"

    baseDirFollowsSourceDir()
    sourceDir file("${projectDir}/docs")
    outputDir file("${projectDir}/build/slides")

    resources {
      from("${rootProject.projectDir}/resources/themes") {
        include 'reveal.css'
        into 'themes'
      }
      from("${rootProject.projectDir}/resources/extensions") {
        include 'cypher-highlightjs.js'
        into 'extensions'
      }
      from("${rootProject.projectDir}/resources/images") {
        include '**'
        into 'images'
      }
      from("${projectDir}/images") {
        include '**'
        into 'images'
      }
    }
  }

  task convertOnlinePdf(type: AsciidoctorPdfTask) {
    dependsOn asciidoctorGemsPrepare

    inputs.file "${rootProject.projectDir}/resources/themes/pdf-theme.yml"

    //noinspection GroovyAccessibility,GroovyAssignabilityCheck
    asciidoctorj {
      modules.pdf.version '1.5.2'
      attributes 'pdf-style': "${rootProject.projectDir}/resources/themes/pdf-theme.yml",
        'imagesdir': '../images'
    }

    baseDir file("${projectDir}/docs")
    sourceDir file("${projectDir}/docs")
    outputDir file("${projectDir}/build/online")
  }

  /* single document */
  task convertSinglePdf(type: AsciidoctorPdfTask) {
    dependsOn asciidoctorGemsPrepare

    inputs.file "${rootProject.projectDir}/resources/themes/pdf-theme.yml"

    //noinspection GroovyAccessibility,GroovyAssignabilityCheck
    asciidoctorj {
      modules.pdf.version '1.5.2'
      attributes 'pdf-style': "${rootProject.projectDir}/resources/themes/pdf-theme.yml",
        'imagesdir': '../images'
    }

    baseDir file("${projectDir}/single-pdf")
    sourceDir file("${projectDir}/single-pdf")
    outputDir file("${projectDir}/build/single-pdf")
  }

  task convertSingleSlides(type: AsciidoctorJRevealJSTask) {
    dependsOn asciidoctorGemsPrepare

    revealjsOptions {
      controls = false
      progressBar = true
      pushToHistory = true
      overviewMode = true
      touchMode = true
      theme = 'white'
    }

    //noinspection GroovyAccessibility,GroovyAssignabilityCheck
    asciidoctorj {
      options template_dirs: ["${rootProject.projectDir}/resources/templates/slide"]
      attributes 'revealjs_customtheme': 'themes/reveal.css',
        'imagesdir': 'images',
        'revealjs_center': 'false',
        'revealjs_width': '1280',
        'revealjs_height': '720',
        'revealjs_margin': '0.05',
        'revealjs_fragmentinurl': 'true',
        'revealjs_slidenumber': 'c',
        'revealjs_minscale': '0.2',
        'revealjs_maxscale': '2'
    }

    plugins 'denehyg/menu.js'
    pluginConfigurationFile "${rootProject.projectDir}/resources/extensions/revealjs-extension-config.js"

    baseDirFollowsSourceDir()
    sourceDir file("${projectDir}/single-slides")
    outputDir file("${projectDir}/build/single-slides")

    resources {
      from("${rootProject.projectDir}/resources/themes") {
        include 'reveal.css'
        into 'themes'
      }
      from("${rootProject.projectDir}/resources/extensions") {
        include 'cypher-highlightjs.js'
        into 'extensions'
      }
      from("${rootProject.projectDir}/resources/images") {
        include '**'
        into 'images'
      }
      from("${projectDir}/images") {
        include '**'
        into 'images'
      }
    }
  }

  task convert {
    dependsOn convertOnlineHtml
    dependsOn convertOnlinePdf
    dependsOn convertSlides
  }

  task liveReload(type: LiveReloadTask) {
    docRoot "${projectDir}/build"
  }

  if (new File("${projectDir}/images").exists()) {
    if (stage == 'production') {
      task s3UploadImages(type: S3UploadTask) {
        //overwrite = true
        source = "${projectDir}/images"
        bucket = "dev.assets.neo4j.com"
        destination = "course/${project.name}/images"
      }
    } else if (stage == 'testing') {
      task s3UploadImages(type: S3UploadTask) {
        //overwrite = true
        source = "${projectDir}/images"
        bucket = "dev.assets.neo4j.com"
        destination = "test-course/${project.name}/images"
      }
    }
  }

  if (stage == 'production' || stage == 'testing') {
    task wordPressUploadCourse(type: WordPressUploadTask) {
      dependsOn convertOnlineHtml
      source = convertOnlineHtml.outputs.files
      type = "course"
      status = "private"
    }
  }

  task s3Upload dependsOn(tasks.names.findAll { it.startsWith("s3Upload") && it != "s3Upload" })
}

